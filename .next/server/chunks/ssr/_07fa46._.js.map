{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/file-upload.tsx"],"sourcesContent":["'use client';\n\nimport { useState, useRef, useCallback } from 'react';\n\ninterface FileUploadProps {\n  onFileSelect: (file: File) => void;\n  isLoading?: boolean;\n  accept?: string;\n  maxSize?: number; // in MB\n}\n\nexport function FileUpload({ \n  onFileSelect, \n  isLoading = false, \n  accept = '.raw',\n  maxSize = 100 // Increased for production grid models with chunking support\n}: FileUploadProps) {\n  const [isDragOver, setIsDragOver] = useState(false);\n  const [error, setError] = useState<string>('');\n  const fileInputRef = useRef<HTMLInputElement>(null);\n\n  const validateFile = useCallback((file: File): string | null => {\n    // Check file extension\n    if (accept && !file.name.toLowerCase().endsWith(accept.toLowerCase())) {\n      return `Please select a ${accept} file`;\n    }\n    \n    // Check file size (convert MB to bytes)\n    if (maxSize && file.size > maxSize * 1024 * 1024) {\n      return `File size must be less than ${maxSize}MB`;\n    }\n    \n    return null;\n  }, [accept, maxSize]);\n\n  const handleFileSelect = useCallback((file: File) => {\n    const validationError = validateFile(file);\n    if (validationError) {\n      setError(validationError);\n      return;\n    }\n    \n    setError('');\n    onFileSelect(file);\n  }, [validateFile, onFileSelect]);\n\n  const handleDrop = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    \n    if (isLoading) return;\n    \n    const files = Array.from(e.dataTransfer.files);\n    if (files.length > 0) {\n      handleFileSelect(files[0]);\n    }\n  }, [handleFileSelect, isLoading]);\n\n  const handleDragOver = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    if (!isLoading) {\n      setIsDragOver(true);\n    }\n  }, [isLoading]);\n\n  const handleDragLeave = useCallback((e: React.DragEvent<HTMLDivElement>) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  }, []);\n\n  const handleFileInputChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const files = Array.from(e.target.files || []);\n    if (files.length > 0) {\n      handleFileSelect(files[0]);\n    }\n  }, [handleFileSelect]);\n\n  return (\n    <div className=\"w-full\">\n      <label className=\"block text-xs text-gray-600 uppercase mb-2\">\n        Upload Grid Model File\n      </label>\n      \n      <div\n        onDrop={handleDrop}\n        onDragOver={handleDragOver}\n        onDragLeave={handleDragLeave}\n        className={`\n          relative border-2 border-dashed rounded-md p-8 text-center cursor-pointer transition-all\n          ${isDragOver \n            ? 'border-black bg-gray-100' \n            : 'border-gray-300 bg-gray-50 hover:border-gray-400 hover:bg-gray-100'\n          }\n          ${isLoading ? 'opacity-50 cursor-not-allowed' : ''}\n        `}\n      >\n        <input\n          ref={fileInputRef}\n          type=\"file\"\n          onChange={handleFileInputChange}\n          accept={accept}\n          disabled={isLoading}\n          className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\"\n        />\n        \n        <div className=\"flex flex-col items-center space-y-2\">\n          <svg\n            className=\"w-8 h-8 text-gray-400\"\n            fill=\"none\"\n            stroke=\"currentColor\"\n            viewBox=\"0 0 24 24\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              strokeLinecap=\"round\"\n              strokeLinejoin=\"round\"\n              strokeWidth={2}\n              d=\"M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12\"\n            />\n          </svg>\n          \n          {isLoading ? (\n            <div className=\"flex items-center space-x-2\">\n              <svg\n                className=\"animate-spin h-4 w-4 text-gray-600\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n              >\n                <circle\n                  className=\"opacity-25\"\n                  cx=\"12\"\n                  cy=\"12\"\n                  r=\"10\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"4\"\n                />\n                <path\n                  className=\"opacity-75\"\n                  fill=\"currentColor\"\n                  d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"\n                />\n              </svg>\n              <span className=\"text-sm text-gray-600\">Processing...</span>\n            </div>\n          ) : (\n            <>\n              <p className=\"text-sm text-gray-600\">\n                <span className=\"font-medium text-black\">Click to upload</span> or drag and drop\n              </p>\n              <p className=\"text-xs text-gray-400\">\n                {accept} files up to {maxSize}MB\n              </p>\n            </>\n          )}\n        </div>\n      </div>\n      \n      {error && (\n        <p className=\"mt-2 text-sm text-red-600\">{error}</p>\n      )}\n    </div>\n  );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 245, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/protected/grid-parser-dashboard.tsx"],"sourcesContent":["'use client';\n\nimport { useState } from 'react';\nimport { FileUpload } from '../file-upload';\nimport CloudWatchLogs from '../components/cloudwatch-logs';\n\ninterface ParseResults {\n  parsed_data: any;\n  deduplication_status: 'created_new' | 'found_existing';\n  content_hash: string;\n  vector_ids: string[];\n}\n\ninterface JobResponse {\n  job_id: string;\n  status: 'processing';\n  total_chunks: number;\n  message: string;\n}\n\ninterface GridParserDashboardProps {\n  userId: string;\n}\n\nexport function GridParserDashboard({ userId }: GridParserDashboardProps) {\n  const [isLoading, setIsLoading] = useState(false);\n  const [results, setResults] = useState<ParseResults | null>(null);\n  const [error, setError] = useState<string>('');\n  const [currentFileName, setCurrentFileName] = useState<string>('');\n  const [successMessage, setSuccessMessage] = useState<string>('');\n  const [jobId, setJobId] = useState<string | null>(null);\n  const [jobProgress, setJobProgress] = useState<{ current: number; total: number } | null>(null);\n\n  // Function to poll job status\n  const pollJobStatus = async (jobId: string) => {\n    const maxAttempts = 120; // 10 minutes max (5-second intervals)\n    let attempts = 0;\n\n    const poll = async (): Promise<void> => {\n      try {\n        const response = await fetch(`/api/jobs/${jobId}`);\n        if (!response.ok) {\n          throw new Error(`Job status check failed: ${response.status}`);\n        }\n\n        const jobStatus = await response.json();\n        console.log('Job status:', jobStatus);\n        console.log('Job result:', jobStatus.result);\n\n        // Update progress\n        setJobProgress({\n          current: jobStatus.progress.current,\n          total: jobStatus.progress.total\n        });\n\n        if (jobStatus.status === 'completed') {\n          // Job finished successfully\n          setJobId(null);\n          setJobProgress(null);\n          setIsLoading(false);\n          \n          if (jobStatus.result) {\n            setResults(jobStatus.result);\n            setSuccessMessage('File processed successfully via async processing!');\n          } else {\n            setError('Job completed but no results found');\n          }\n          return;\n        } else if (jobStatus.status === 'failed') {\n          // Job failed\n          setJobId(null);\n          setJobProgress(null);\n          setIsLoading(false);\n          setError(jobStatus.error_message || 'Processing failed');\n          return;\n        } else if (jobStatus.status === 'processing' || jobStatus.status === 'pending') {\n          // Job still running, continue polling\n          attempts++;\n          if (attempts < maxAttempts) {\n            setTimeout(poll, 5000); // Poll every 5 seconds\n          } else {\n            setError('Processing timed out');\n            setIsLoading(false);\n            setJobId(null);\n            setJobProgress(null);\n          }\n        }\n      } catch (error) {\n        console.error('Error polling job status:', error);\n        attempts++;\n        if (attempts < maxAttempts) {\n          setTimeout(poll, 5000);\n        } else {\n          setError('Failed to check job status');\n          setIsLoading(false);\n          setJobId(null);\n          setJobProgress(null);\n        }\n      }\n    };\n\n    // Start polling\n    poll();\n  };\n\n  const handleFileSelect = async (file: File) => {\n    setIsLoading(true);\n    setError('');\n    setResults(null);\n    setSuccessMessage('');\n    setCurrentFileName(file.name);\n\n    try {\n      // Read file content\n      const fileContent = await readFileAsText(file);\n      \n      // Call backend API\n      const apiUrl = process.env.NEXT_PUBLIC_API_URL || 'https://gdp2ynbdpc.execute-api.us-west-2.amazonaws.com/prod';\n      const response = await fetch(`${apiUrl}/parse`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          fileContent: fileContent\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error(`API error: ${response.status} ${response.statusText}`);\n      }\n\n      const responseData = await response.json();\n      \n      // Check if this is an async job response\n      if ('job_id' in responseData) {\n        const jobResponse = responseData as JobResponse;\n        setJobId(jobResponse.job_id);\n        setJobProgress({ current: 0, total: jobResponse.total_chunks });\n        setSuccessMessage(`Processing started with ${jobResponse.total_chunks} chunks. Polling for progress...`);\n        \n        // Start polling for job completion\n        pollJobStatus(jobResponse.job_id);\n      } else {\n        // Synchronous response with direct results\n        const parseResults = responseData as ParseResults;\n        setResults(parseResults);\n        setIsLoading(false);\n      }\n\n      // Save audit record to database (only for synchronous responses)\n      if (!('job_id' in responseData)) {\n        const parseResults = responseData as ParseResults;\n        try {\n          const auditResponse = await fetch('/api/audit', {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json',\n            },\n            body: JSON.stringify({\n              userId,\n              fileName: file.name,\n              parsedJson: parseResults.parsed_data,\n              vectorId: parseResults.vector_ids?.[0] || 'unknown',\n              status: 'success'\n            }),\n          });\n\n          if (auditResponse.ok) {\n            setSuccessMessage('File parsed successfully and saved to audit log!');\n          } else {\n            setSuccessMessage('File parsed successfully, but failed to save audit log.');\n          }\n        } catch (dbError) {\n          console.error('Failed to save audit record:', dbError);\n          setSuccessMessage('File parsed successfully, but failed to save audit log.');\n        }\n      }\n\n    } catch (err) {\n      const errorMessage = err instanceof Error ? err.message : 'Failed to parse file';\n      setError(errorMessage);\n      \n      // Save error audit record\n      try {\n        await fetch('/api/audit', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n          },\n          body: JSON.stringify({\n            userId,\n            fileName: file.name,\n            parsedJson: null,\n            vectorId: 'error',\n            status: 'error'\n          }),\n        });\n      } catch (dbError) {\n        console.error('Failed to save error audit record:', dbError);\n      }\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const readFileAsText = (file: File): Promise<string> => {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.onload = (e) => {\n        if (e.target?.result) {\n          resolve(e.target.result as string);\n        } else {\n          reject(new Error('Failed to read file'));\n        }\n      };\n      reader.onerror = () => reject(new Error('Failed to read file'));\n      reader.readAsText(file);\n    });\n  };\n\n  return (\n    <div className=\"h-screen flex gap-4 p-4\">\n      {/* Left Column - CloudWatch Logs (70%) */}\n      <div className=\"w-[70%] h-full\">\n        <CloudWatchLogs \n          isActive={isLoading || results !== null}\n        />\n      </div>\n\n      {/* Right Column - Dashboard Controls (30%) */}\n      <div className=\"w-[30%] h-full overflow-y-auto space-y-6\">\n        {/* File Upload Section */}\n        <div className=\"bg-white rounded-lg shadow p-6\">\n          <h2 className=\"text-lg font-medium text-gray-900 mb-4\">\n            Upload Grid Model File\n          </h2>\n          <p className=\"text-sm text-gray-600 mb-4\">\n            Upload a PSLF .raw file (up to 100MB) to extract structured data using AI-powered parsing.\n          </p>\n          <div className=\"mb-6 p-3 bg-blue-50 border border-blue-200 rounded-md\">\n            <p className=\"text-sm text-blue-700\">\n              <span className=\"font-medium\">⏱️ Processing Time:</span> The Lambda processing typically takes 5-6 minutes for sample files. \n              Watch the live logs on the left for real-time progress updates.\n            </p>\n          </div>\n          \n          <FileUpload\n            onFileSelect={handleFileSelect}\n            isLoading={isLoading}\n            accept=\".raw\"\n            maxSize={100}\n          />\n          \n          {successMessage && (\n            <div className=\"mt-4 p-3 bg-green-50 border border-green-200 rounded-md\">\n              <p className=\"text-sm text-green-600\">{successMessage}</p>\n            </div>\n          )}\n        </div>\n\n        {/* Processing Status */}\n        {isLoading && (\n          <div className=\"bg-white rounded-lg shadow p-6\">\n            <div className=\"flex items-center space-x-3\">\n              <svg\n                className=\"animate-spin h-5 w-5 text-blue-500 flex-shrink-0\"\n                xmlns=\"http://www.w3.org/2000/svg\"\n                fill=\"none\"\n                viewBox=\"0 0 24 24\"\n              >\n                <circle\n                  className=\"opacity-25\"\n                  cx=\"12\"\n                  cy=\"12\"\n                  r=\"10\"\n                  stroke=\"currentColor\"\n                  strokeWidth=\"4\"\n                />\n                <path\n                  className=\"opacity-75\"\n                  fill=\"currentColor\"\n                  d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4z\"\n                />\n              </svg>\n              <div className=\"text-sm text-gray-600 min-w-0\">\n                <p className=\"font-medium truncate\">\n                  {jobId ? `Processing ${currentFileName} (async)` : `Processing ${currentFileName}`}\n                </p>\n                <p className=\"text-xs text-gray-500 mt-1\">\n                  {jobId ? 'S3-triggered background processing' : 'Direct AI processing'}\n                </p>\n                {jobId && (\n                  <div className=\"mt-3\">\n                    <span className=\"text-xs text-gray-500 block truncate\">Job: {jobId.substring(0, 8)}...</span>\n                    <div className=\"mt-2 p-2 bg-yellow-50 border border-yellow-200 rounded text-xs\">\n                      <span className=\"text-yellow-700\">\n                        ⏱️ Expected processing time: 5-6 minutes for typical files\n                      </span>\n                    </div>\n                    {jobProgress && (\n                      <div className=\"mt-2\">\n                        <div className=\"bg-gray-200 rounded-full h-2\">\n                          <div\n                            className=\"bg-blue-500 h-2 rounded-full transition-all duration-300\"\n                            style={{\n                              width: `${Math.round((jobProgress.current / jobProgress.total) * 100)}%`\n                            }}\n                          />\n                        </div>\n                        <span className=\"text-xs text-gray-500 mt-1 block\">\n                          {jobProgress.current}/{jobProgress.total} chunks ({Math.round((jobProgress.current / jobProgress.total) * 100)}%)\n                        </span>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        )}\n\n        {/* Results Section */}\n\n\n        {/* Info Section */}\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-6\">\n          <h3 className=\"text-sm font-medium text-blue-900 mb-2\">\n            About This Tool\n          </h3>\n          <div className=\"text-sm text-blue-700 space-y-2\">\n            <p>\n              AI-powered parsing using Claude 3.7 Sonnet with S3-triggered processing for large files.\n            </p>\n            <ul className=\"list-disc list-inside space-y-1 text-xs\">\n              <li>Real-time CloudWatch logs streaming</li>\n              <li>Automatic chunking for 100MB+ files</li>\n              <li>Background processing with progress tracking</li>\n              <li>Vector embeddings for semantic search</li>\n            </ul>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 782, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 790, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/src/server/future/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"sourcesContent":["unable to read source [project]/node_modules/.pnpm/next@14.2.31_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/src/server/future/route-modules/app-page/vendored/ssr/react-jsx-dev-runtime.ts"],"names":["module","exports","require","vendored","ReactJsxDevRuntime"],"mappings":";AAAAA,OAAOC,OAAO,GAAGC,qNAAiCC,QAAQ,CACxD,YACD,CAACC,kBAAkB"}},
    {"offset": {"line": 792, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}