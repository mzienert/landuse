{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/layout.tsx"],"sourcesContent":["import './globals.css';\n\nimport { GeistSans } from 'geist/font/sans';\n\nlet title = 'Next.js + Postgres Auth Starter';\nlet description =\n  'This is a Next.js starter kit that uses NextAuth.js for simple email + password login and a Postgres database to persist the data.';\n\nexport const metadata = {\n  title,\n  description,\n  twitter: {\n    card: 'summary_large_image',\n    title,\n    description,\n  },\n  metadataBase: new URL('https://nextjs-postgres-auth.vercel.app'),\n};\n\nexport default function RootLayout({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  return (\n    <html lang=\"en\">\n      <body className={GeistSans.variable}>{children}</body>\n    </html>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;AAIA,IAAI,QAAQ;AACZ,IAAI,cACF;AAEK,MAAM,WAAW;IACtB;IACA;IACA,SAAS;QACP,MAAM;QACN;QACA;IACF;IACA,cAAc,IAAI,IAAI;AACxB;AAEe,SAAS,WAAW,EACjC,QAAQ,EAGT;IACC,qBACE,wXAAC;QAAK,MAAK;kBACT,cAAA,wXAAC;YAAK,WAAW,iVAAA,CAAA,YAAS,CAAC,QAAQ;sBAAG;;;;;;;;;;;AAG5C"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 57, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/db.ts"],"sourcesContent":["import { drizzle } from 'drizzle-orm/postgres-js';\nimport { pgTable, serial, varchar, text, jsonb, timestamp, integer } from 'drizzle-orm/pg-core';\nimport { eq } from 'drizzle-orm';\nimport postgres from 'postgres';\nimport { genSaltSync, hashSync } from 'bcrypt-ts';\n\n// Optionally, if not using email/pass login, you can\n// use the Drizzle adapter for Auth.js / NextAuth\n// https://authjs.dev/reference/adapter/drizzle\nlet client = postgres(process.env.DATABASE_URL!);\nlet db = drizzle(client);\n\nexport async function getUser(email: string) {\n  const users = await ensureTableExists();\n  return await db.select().from(users).where(eq(users.email, email));\n}\n\nexport async function createUser(email: string, password: string) {\n  const users = await ensureTableExists();\n  let salt = genSaltSync(10);\n  let hash = hashSync(password, salt);\n\n  return await db.insert(users).values({ email, password: hash });\n}\n\nasync function ensureTableExists() {\n  const result = await client`\n    SELECT EXISTS (\n      SELECT FROM information_schema.tables \n      WHERE table_schema = 'public' \n      AND table_name = 'User'\n    );`;\n\n  if (!result[0].exists) {\n    await client`\n      CREATE TABLE \"User\" (\n        id SERIAL PRIMARY KEY,\n        email VARCHAR(64),\n        password VARCHAR(64)\n      );`;\n  }\n\n  const table = pgTable('User', {\n    id: serial('id').primaryKey(),\n    email: varchar('email', { length: 64 }),\n    password: varchar('password', { length: 64 }),\n  });\n\n  return table;\n}\n\nasync function ensureParseAuditsTableExists() {\n  const result = await client`\n    SELECT EXISTS (\n      SELECT FROM information_schema.tables \n      WHERE table_schema = 'public' \n      AND table_name = 'parse_audits'\n    );`;\n\n  if (!result[0].exists) {\n    await client`\n      CREATE TABLE \"parse_audits\" (\n        id SERIAL PRIMARY KEY,\n        user_id TEXT,\n        file_name TEXT,\n        parsed_json JSONB,\n        vector_id TEXT,\n        timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        status TEXT\n      );`;\n  }\n\n  const table = pgTable('parse_audits', {\n    id: serial('id').primaryKey(),\n    user_id: text('user_id'),\n    file_name: text('file_name'),\n    parsed_json: jsonb('parsed_json'),\n    vector_id: text('vector_id'),\n    timestamp: timestamp('timestamp').defaultNow(),\n    status: text('status'),\n  });\n\n  return table;\n}\n\nexport async function createParseAudit(\n  userId: string,\n  fileName: string,\n  parsedJson: any,\n  vectorId: string,\n  status: string\n) {\n  const parseAudits = await ensureParseAuditsTableExists();\n  return await db.insert(parseAudits).values({\n    user_id: userId,\n    file_name: fileName,\n    parsed_json: parsedJson,\n    vector_id: vectorId,\n    status: status,\n  });\n}\n\nexport async function getParseAudits(userId: string) {\n  const parseAudits = await ensureParseAuditsTableExists();\n  return await db.select().from(parseAudits).where(eq(parseAudits.user_id, userId));\n}\n\n// Job processing table for async operations\nasync function ensureJobsTableExists() {\n  const result = await client`\n    SELECT EXISTS (\n      SELECT FROM information_schema.tables \n      WHERE table_schema = 'public' \n      AND table_name = 'processing_jobs'\n    );`;\n\n  if (!result[0].exists) {\n    await client`\n      CREATE TABLE \"processing_jobs\" (\n        id TEXT PRIMARY KEY,\n        user_id TEXT,\n        file_name TEXT,\n        file_size INTEGER,\n        status TEXT DEFAULT 'pending',\n        progress_current INTEGER DEFAULT 0,\n        progress_total INTEGER DEFAULT 0,\n        result JSONB,\n        error_message TEXT,\n        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n      );`;\n  }\n\n  const table = pgTable('processing_jobs', {\n    id: text('id').primaryKey(),\n    user_id: text('user_id'),\n    file_name: text('file_name'),\n    file_size: integer('file_size'),\n    status: text('status').default('pending'),\n    progress_current: integer('progress_current').default(0),\n    progress_total: integer('progress_total').default(0),\n    result: jsonb('result'),\n    error_message: text('error_message'),\n    created_at: timestamp('created_at').defaultNow(),\n    updated_at: timestamp('updated_at').defaultNow(),\n  });\n\n  return table;\n}\n\nexport async function createJob(\n  jobId: string,\n  userId: string,\n  fileName: string,\n  fileSize: number,\n  totalChunks: number\n) {\n  const jobs = await ensureJobsTableExists();\n  return await db.insert(jobs).values({\n    id: jobId,\n    user_id: userId,\n    file_name: fileName,\n    file_size: fileSize,\n    status: 'pending',\n    progress_current: 0,\n    progress_total: totalChunks,\n  });\n}\n\nexport async function updateJobProgress(\n  jobId: string,\n  currentChunk: number,\n  status: string = 'processing'\n) {\n  const jobs = await ensureJobsTableExists();\n  return await db.update(jobs)\n    .set({ \n      progress_current: currentChunk,\n      status: status,\n      updated_at: new Date()\n    })\n    .where(eq(jobs.id, jobId));\n}\n\nexport async function completeJob(\n  jobId: string,\n  result: any,\n  status: string = 'completed'\n) {\n  const jobs = await ensureJobsTableExists();\n  return await db.update(jobs)\n    .set({ \n      status: status,\n      result: result,\n      updated_at: new Date()\n    })\n    .where(eq(jobs.id, jobId));\n}\n\nexport async function failJob(\n  jobId: string,\n  errorMessage: string\n) {\n  const jobs = await ensureJobsTableExists();\n  return await db.update(jobs)\n    .set({ \n      status: 'failed',\n      error_message: errorMessage,\n      updated_at: new Date()\n    })\n    .where(eq(jobs.id, jobId));\n}\n\nexport async function getJob(jobId: string) {\n  const jobs = await ensureJobsTableExists();\n  const result = await db.select().from(jobs).where(eq(jobs.id, jobId));\n  return result[0] || null;\n}\n\n\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 253, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 258, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/auth.config.ts"],"sourcesContent":["import { NextAuthConfig } from 'next-auth';\n\nexport const authConfig = {\n  pages: {\n    signIn: '/login',\n  },\n  providers: [\n    // added later in auth.ts since it requires bcrypt which is only compatible with Node.js\n    // while this file is also used in non-Node.js environments\n  ],\n  callbacks: {\n    authorized({ auth, request: { nextUrl } }) {\n      let isLoggedIn = !!auth?.user;\n      let isOnDashboard = nextUrl.pathname.startsWith('/protected');\n\n      if (isOnDashboard) {\n        if (isLoggedIn) return true;\n        return false; // Redirect unauthenticated users to login page\n      } else if (isLoggedIn) {\n        return Response.redirect(new URL('/protected', nextUrl));\n      }\n\n      return true;\n    },\n  },\n} satisfies NextAuthConfig;\n"],"names":[],"mappings":";;;AAEO,MAAM,aAAa;IACxB,OAAO;QACL,QAAQ;IACV;IACA,WAAW,EAGV;IACD,WAAW;QACT,YAAW,EAAE,IAAI,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE;YACvC,IAAI,aAAa,CAAC,CAAC,MAAM;YACzB,IAAI,gBAAgB,QAAQ,QAAQ,CAAC,UAAU,CAAC;YAEhD,IAAI,eAAe;gBACjB,IAAI,YAAY,OAAO;gBACvB,OAAO,OAAO,+CAA+C;YAC/D,OAAO,IAAI,YAAY;gBACrB,OAAO,SAAS,QAAQ,CAAC,IAAI,IAAI,cAAc;YACjD;YAEA,OAAO;QACT;IACF;AACF"}},
    {"offset": {"line": 280, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 285, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/auth.ts"],"sourcesContent":["import NextAuth from 'next-auth';\nimport Credentials from 'next-auth/providers/credentials';\nimport { compare } from 'bcrypt-ts';\nimport { getUser } from 'app/db';\nimport { authConfig } from 'app/auth.config';\n\nexport const {\n  handlers: { GET, POST },\n  auth,\n  signIn,\n  signOut,\n} = NextAuth({\n  ...authConfig,\n  providers: [\n    Credentials({\n      async authorize({ email, password }: any) {\n        let user = await getUser(email);\n        if (user.length === 0) return null;\n        let passwordsMatch = await compare(password, user[0].password!);\n        if (passwordsMatch) return user[0] as any;\n      },\n    }),\n  ],\n});\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAMO,MAAM,EACX,UAAU,EAAE,GAAG,EAAE,IAAI,EAAE,EACvB,IAAI,EACJ,MAAM,EACN,OAAO,EACR,GAAG,CAAA,GAAA,wVAAA,CAAA,UAAQ,AAAD,EAAE;IACX,GAAG,qHAAA,CAAA,aAAU;IACb,WAAW;QACT,CAAA,GAAA,sNAAA,CAAA,UAAW,AAAD,EAAE;YACV,MAAM,WAAU,EAAE,KAAK,EAAE,QAAQ,EAAO;gBACtC,IAAI,OAAO,MAAM,CAAA,GAAA,yGAAA,CAAA,UAAO,AAAD,EAAE;gBACzB,IAAI,KAAK,MAAM,KAAK,GAAG,OAAO;gBAC9B,IAAI,iBAAiB,MAAM,CAAA,GAAA,sMAAA,CAAA,UAAO,AAAD,EAAE,UAAU,IAAI,CAAC,EAAE,CAAC,QAAQ;gBAC7D,IAAI,gBAAgB,OAAO,IAAI,CAAC,EAAE;YACpC;QACF;KACD;AACH"}},
    {"offset": {"line": 318, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 323, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/protected/grid-parser-dashboard.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LandUseCodeDashboard = registerClientReference(\n    function() { throw new Error(\"Attempted to call LandUseCodeDashboard() from the server but LandUseCodeDashboard is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/app/protected/grid-parser-dashboard.tsx\",\n    \"LandUseCodeDashboard\",\n);\n"],"names":[],"mappings":";;;;;;AACO,MAAM,uBAAuB,CAAA,GAAA,+XAAA,CAAA,0BAAuB,AAAD,EACtD;IAAa,MAAM,IAAI,MAAM;AAAwP,GACrR,qDACA"}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 337, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 342, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 347, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/protected/page.tsx"],"sourcesContent":["import { auth, signOut } from 'app/auth';\nimport { LandUseCodeDashboard } from './grid-parser-dashboard';\n\nexport default async function ProtectedPage() {\n  let session = await auth();\n\n  return (\n    <div className=\"min-h-screen bg-gray-100\">\n      <div className=\"bg-white shadow\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex justify-between items-center py-4\">\n            <h1 className=\"text-xl font-semibold text-gray-900\">\n              Land Use Code Dashboard\n            </h1>\n            <div className=\"flex items-center space-x-4\">\n              <span className=\"text-sm text-gray-600\">\n                {session?.user?.email}\n              </span>\n              <SignOut />\n            </div>\n          </div>\n        </div>\n      </div>\n      \n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n        <LandUseCodeDashboard userId={session?.user?.email || ''} />\n      </div>\n    </div>\n  );\n}\n\nfunction SignOut() {\n  return (\n    <form\n      action={async () => {\n        'use server';\n        await signOut();\n      }}\n    >\n      <button type=\"submit\">Sign out</button>\n    </form>\n  );\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;AAGe,eAAe;IAC5B,IAAI,UAAU,MAAM,CAAA,GAAA,2GAAA,CAAA,OAAI,AAAD;IAEvB,qBACE,wXAAC;QAAI,WAAU;;0BACb,wXAAC;gBAAI,WAAU;0BACb,cAAA,wXAAC;oBAAI,WAAU;8BACb,cAAA,wXAAC;wBAAI,WAAU;;0CACb,wXAAC;gCAAG,WAAU;0CAAsC;;;;;;0CAGpD,wXAAC;gCAAI,WAAU;;kDACb,wXAAC;wCAAK,WAAU;kDACb,SAAS,MAAM;;;;;;kDAElB,wXAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAMT,wXAAC;gBAAI,WAAU;0BACb,cAAA,wXAAC,gJAAA,CAAA,uBAAoB;oBAAC,QAAQ,SAAS,MAAM,SAAS;;;;;;;;;;;;;;;;;AAI9D;AAEA,SAAS;IACP,qBACE,wXAAC;QACC,MAAM;kBAKN,cAAA,wXAAC;YAAO,MAAK;sBAAS;;;;;;;;;;;AAG5B;;IANQ,MAAM,CAAA,GAAA,2GAAA,CAAA,UAAO,AAAD;AACd"}},
    {"offset": {"line": 461, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 477, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/app/favicon.ico.mjs (structured image object)"],"sourcesContent":["import src from \"IMAGE\";\nexport default { src, width: 256, height: 256 }\n"],"names":[],"mappings":";;;;;;uCACe;IAAE,KAAA,2GAAA,CAAA,UAAG;IAAE,OAAO;IAAK,QAAQ;AAAI"}},
    {"offset": {"line": 488, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 492, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/.next-internal/server/app/protected/page/actions.js"],"sourcesContent":["__turbopack_export_value__({\n  'f77041cc7642b2a0d12f4c887f5cc5805e3ca47c': (...args) => Promise.resolve(require('ACTIONS_MODULE0')).then(mod => (0, mod['$$ACTION_0'])(...args)),\n});"],"names":[],"mappings":"AAAA,2BAA2B;IACzB,4CAA4C,CAAC,GAAG,OAAS,QAAQ,OAAO,mFAA6B,IAAI,CAAC,CAAA,MAAO,CAAC,GAAG,GAAG,CAAC,aAAa,KAAK;AAC7I"}},
    {"offset": {"line": 495, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}